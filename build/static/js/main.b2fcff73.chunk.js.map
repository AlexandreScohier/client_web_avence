{"version":3,"sources":["component/API/index.js","component/Connection.js","component/Menu.js","component/AddGarage.js","component/RowRead.js","component/RowEdit.js","component/Tableau.js","routes/Routes.js","App.js","serviceWorker.js","store/index.js","index.js","component/API/API.js"],"names":["api","require","login","adresseMail","password","a","undefined","Error","getAllGarage","Connection","props","state","email","loaded","loading","errorMassage","connected","this","setState","error","errorMessage","data","user","userRecup","userType","evt","target","value","contentMessage","to","Grid","item","Typography","component","color","className","container","justify","direction","spacing","TextField","type","label","onChange","event","userChange","required","autoFocus","passwordChange","onKeyPress","code","dissmisError","handleSubmit","then","Button","variant","onClick","React","Component","connect","dispatch","payload","userInfo","Menu","prevProps","prevState","snapshot","Link","console","log","userStore","AddGarage","name","address","phoneNumber","image","placeholder","adress","RowRead","garage","nom","adresse","numtel","alt","width","height","src","RowEdit","TableauGarage","garageTitle","garages","response","catch","map","Routes","path","Login","render","Tableau","App","Boolean","window","location","hostname","match","store","createStore","combineReducers","action","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","API_URL","header","axios","post","headers","status","reponse","get","JSON","stringify"],"mappings":"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","file":"static/js/main.b2fcff73.chunk.js","sourcesContent":["const api = require('./API');\n\nconst login = async(adresseMail,password)=>{\n    if(adresseMail!==undefined && password!==undefined){\n        return await api.login(adresseMail,password);\n    }else\n        throw new Error(\"Identfiants manquants\");\n}\nconst getAllGarage = async ()=>{\n    return await api.getAllGarage();\n}\nexport {\n    login,\n    getAllGarage\n}","import React, {useState} from \"react\";\nimport \"../style/connectionStyle.css\";\nimport {login} from \"./API\";\nimport {\n    Button,\n    TextField,\n    Grid,\n    Paper,\n    Typography\n} from \"@material-ui/core\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\n\n\nclass Connection extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            email: '',\n            password:'',\n            loaded:false,\n            loading:false,\n        errorMassage:false,\n        connected:false};\n\n    }\n    dissmisError(){\n        this.setState({error:\"\"});\n    }\n    async handleSubmit(){\n        this.setState({error:false,\n        errorMessage:\"\",\n        loading:true,\n        loaded:false});\n        try{\n            const data = await login(this.state.email,this.state.password);\n            if(data.user.userRecup.userType !== \"mecano\") {\n                throw new Error(\"Un client ne peut pas se connecter Ã  l'application!\");\n            }\n            this.props.login(data.user.userRecup);\n            this.setState({\n                connected:true});\n        }catch (error) {\n            this.setState({\n                error : true,\n                loading:false,\n                loaded:true,\n                errorMessage:error\n            });\n        }\n    }\n    userChange(evt){\n        this.setState({email:evt.target.value});\n    }\n    passwordChange(evt){\n        this.setState({password:evt.target.value});\n    }\n\n\n    render() {\n            if(this.state.connected){\n                return <Redirect to={\"/menu\"}/>\n            }\n            let contentMessage;\n            if(!this.state.loaded)\n                contentMessage = null;\n            else if(this.state.loading){\n                contentMessage = <Grid item><Typography component={\"h6\"} color={\"error\"}>Chargement en cours</Typography> </Grid>;\n            }else if(this.state.error){\n                contentMessage = <Grid item><Typography component={\"h6\"} color={\"error\"}>{this.state.errorMassage}</Typography> </Grid>\n            }\n            return (\n                <div className=\"gridConnection\">\n                <Grid container  justify={\"center\"} direction={\"row\"}>\n                    <Grid item>\n                        <Grid container direction={\"column\"} justify={\"center\"} className={\"login-form\"}>\n                            <Grid item>\n                                <Typography component={\"h1\"}>Se connecter</Typography>\n                            </Grid>\n                            <Grid item>\n                                <Grid container direction={\"column\"} spacing={3}>\n                                    <Grid item>\n                                        <TextField\n                                        type={\"text\"}\n                                        label={\"Adresse mail\"}\n                                        value={this.state.email}\n                                        onChange={(event)=>this.userChange(event)} required={true} autoFocus\n                                        />\n                                    </Grid>\n                                    <Grid item>\n                                        <TextField\n                                        type={\"password\"}\n                                        label={\"Mot de passe\"}\n                                        value={this.state.password}\n                                        onChange={(event)=>this.passwordChange(event)}\n                                        onKeyPress={(event)=>{\n                                            if(event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n                                                this.dissmisError();\n                                                this.handleSubmit().then();\n                                            }\n                                        }}\n                                        required\n                                        />\n                                    </Grid>\n                                    <Grid item>\n                                        <Button\n                                            variant={\"contained\"}\n                                            type={\"submit\"}\n                                            className={\"button-block\"}\n                                            onClick={()=>{\n                                                this.dissmisError();\n                                                this.handleSubmit();\n                                            }}>\n                                            Connexion\n                                        </Button>\n                                    </Grid>\n                                    {contentMessage && contentMessage}\n                                </Grid>\n                            </Grid>\n\n                        </Grid>\n                    </Grid>\n                </Grid>\n                </div>\n            )\n\n\n    }\n}\nconst mapDispatchToProps = (dispatch)=>{\n    return {\n        login : (user)=>{\n            dispatch({type:\"login\", payload:{userInfo:user}})\n        }\n    }\n}\nexport default connect(undefined,mapDispatchToProps)(Connection);","import React, {useState} from \"react\";\nimport \"../style/menuStyle.css\";\nimport \"../style/mainStyle.css\";\nimport {\n    Button,\n    TextField,\n    Grid,\n    Paper,\n    Typography\n} from \"@material-ui/core\";\nimport {Link, Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nclass Menu extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            user : this.props.user\n        }\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n    }\n\n    render() {\n        return(\n            <div className=\"menu\">\n                <Button\n                    variant={\"contained\"}\n                    component={Link} to={\"/garages\"}>\n                    Modifier les garages\n                </Button>\n                <Button\n                    variant={\"contained\"}\n                    component={Link} to={\"/garages\"}>\n                    Modifier les mÃ©caniciens\n                </Button>\n                <Button\n                    variant={\"contained\"}\n                    onClick={()=>{\n                        console.log(\"Essaie\")\n                        return <Redirect to={\"/garages\"}/>}}>\n                    Modifier les horaires\n                </Button>\n                <Button\n                    variant={\"contained\"}\n                    onClick={()=>{\n                        console.log(\"Essaie\")\n                        return <Redirect to={\"/garages\"}/>}}>\n                    Modifier les reparations\n                </Button>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = (state)=>{\n    console.log(\"Matthys\");\n    return {\n        user : state.userStore\n    }\n}\nconst dispatchToProps = (dispatch)=>{\n    return {\n        login : (user)=>{\n            dispatch({type:\"login\", payload:{userInfo:user}})\n        }\n    }\n}\n\nexport default connect(mapStateToProps,dispatchToProps)(Menu);","import React from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\nclass AddGarage extends React.Component{\n    constructor() {\n        super();\n        this.state = {\n            name: \"\",\n            address: \"\",\n            phoneNumber: \"\",\n            image: \"\"}\n    }\n    render() {\n        return(\n            <div>\n                <h2>Ajouter un garage</h2>\n                <input\n                    type={\"text\"}\n                    name={\"Nom\"}\n                    value={this.state.name}\n                    placeholder={\"Nom\"}\n                    required\n                    />\n                <input\n                    type={\"text\"}\n                    name={\"adresse\"}\n                    placeholder={\"Adresse\"}\n                    value={this.state.adress}\n                    required\n                />\n                <input\n                    type={\"text\"}\n                    name={\"NumÃ©ro de tÃ©lÃ©phone\"}\n                    placeholder={\"NumÃ©ro de tÃ©lÃ©phone\"}\n                    value={this.state.phoneNumber}\n                    required\n                />\n                <input\n                    type={\"text\"}\n                    name={\"image\"}\n                    placeholder={\"Url de l'image\"}\n                    value={this.state.image}\n                    required\n                />\n                <button type={\"submit\"}>Add</button>\n            </div>\n        )\n    }\n\n}\n\nexport default AddGarage;","import React from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\nconst RowRead = ({garage}) =>{\n        return(\n                <tr>\n                    <td>{garage.nom}</td>\n                    <td>{garage.adresse}</td>\n                    <td>{garage.numtel}</td>\n                    <td><img alt={\"\"} width={\"60px\"} height={\"60px\"} src={garage.image}/></td>\n                </tr>\n        )\n}\n\nexport default RowRead;","import React from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\nconst RowEdit = () =>{\n    return(\n        <tr>\n            <input\n                type={\"text\"}\n                name={\"Nom\"}\n                value={this.state.name}\n                placeholder={\"Nom\"}\n                required\n            />\n            <input\n                type={\"text\"}\n                name={\"adresse\"}\n                placeholder={\"Adresse\"}\n                value={this.state.adress}\n                required\n            />\n            <input\n                type={\"text\"}\n                name={\"NumÃ©ro de tÃ©lÃ©phone\"}\n                placeholder={\"NumÃ©ro de tÃ©lÃ©phone\"}\n                value={this.state.phoneNumber}\n                required\n            />\n            <input\n                type={\"text\"}\n                name={\"image\"}\n                placeholder={\"Url de l'image\"}\n                value={this.state.image}\n                required\n            />\n        </tr>\n    )\n}\n\nexport default RowEdit;","import React,{useState,Fragment} from \"react\";\nimport {getAllGarage} from \"./API\";\nimport AddGarage from \"./AddGarage\";\nimport RowRead from \"./RowRead\";\nimport RowEdit from \"./RowEdit\";\n\nclass TableauGarage extends React.Component{\n    constructor() {\n        super();\n        this.state = {\n            garageTitle: {\n                name: \"Nom\",\n                address: \"adresse\",\n                phoneNumber: \"NumÃ©ro de tÃ©lÃ©phone\",\n                image: \"image\"\n            },\n            garages: [{\n                \"nom\": \"Brxuelles\",\n                \"adresse\": \"loin\",\n                \"numtel\": \"04858828\"\n\n            },\n                {\n                    \"nom\": \"Brxuelles\",\n                    \"adresse\": \"loin\",\n                    \"numtel\": \"04858828\"\n                }]\n        }\n\n    }\n\n    componentDidMount() {\n        getAllGarage().then(response=>this.setState({garages:response})).catch(error=>console.error(error));\n    }\n\n\n\n    render() {\n        return (\n            <div>\n                <form>\n                <table>\n                    <thead>\n                        <tr>\n                            <th>{this.state.garageTitle.name}</th>\n                            <th>{this.state.garageTitle.address}</th>\n                            <th>{this.state.garageTitle.phoneNumber}</th>\n                            <th>{this.state.garageTitle.image}</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                    {\n                        this.state.garages.map((garage)=>(\n                            <Fragment>\n                                <RowEdit/>\n                                <RowRead garage={garage}/>\n                            </Fragment>\n                            ))}\n                    </tbody>\n                </table>\n                </form>\n                <AddGarage/>\n            </div>\n\n        )\n    }\n}\nexport default TableauGarage;","import React from \"react\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect\n} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport Login from \"../component/Connection\";\nimport Menu from \"../component/Menu\";\nimport Tableau from \"../component/Tableau\"\nclass Routes extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            user : undefined\n        }\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(this.state.user === undefined){\n            console.log(\"cc\");\n            this.setState({user:this.props.userStore});\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Router>\n                    <Switch>\n                        <Route path=\"/login\" component={Login}/>\n                        <Route path=\"/menu\" render={()=>{\n                            return this.state.user === undefined ? <Redirect to=\"/login\"/>:\n                                (this.state.user.userType === \"mecano\")? <Menu/> : <Redirect to={\"/\"}/>\n                        }\n\n                        }/>\n                        <Route path=\"/garages\" render={()=>{\n                        return this.state.user === undefined? <Redirect to={\"/login\"}/> : (this.state.user.userType === \"mecano\")?<Tableau/> : <Redirect to={'/login'}/>\n                        }\n                        }/>\n\n                        <Route path={\"/\"} render={()=>{\n                           return this.state.user === undefined ? <Redirect to={\"/login\"}/> : (this.state.user.userType === \"mecano\") ? <Menu/> :  <Redirect to={\"/login\"}/>\n                        }\n                        }\n                        />\n\n                    </Switch>\n                </Router>\n            </div>\n        );\n    }\n}\nconst mapStateToProps = (state) => {\n    console.log(state.login.userStore);\n    return {\n        userStore: state.login.userStore,\n    }\n};\nexport default connect(mapStateToProps)(Routes);","import React from 'react';\nimport './App.css';\n\nimport Routes from './routes/Routes';\nimport Tableau from \"./component/Tableau\";\nfunction App() {\n  return (\n    <div className=\"App\" >\n      <Tableau/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, combineReducers } from \"redux\";\n\nconst userReducer = (state = {user : {}}, action) => {\n\n    switch (action.type) {\n        case \"login\" :\n            return {userStore : action.payload.userInfo};\n        default :\n            return state;\n    }\n}\n\n\nconst store = createStore(combineReducers({ login: userReducer}));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}><App/></Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import axios from \"axios\";\n\nconst API_URL = \"http://localhost:3001/\";\nlet header = {'Access-Control-Allow-Origin' : \"*\"}\nconst login = async(adresseMail,password)=>{\n\n    const reponse = await axios.post(API_URL+\"user/admin\",{\n        adresseMail,\n        password\n    },{\n        headers : header\n    }).catch(error=>{\n\n        if(error.response.status === 400){\n            throw new Error(\"Les identifiants n'existent pas dans la base de donnÃ©es\");\n        }else if(error.response.status === 404){\n            throw new Error(\"Utilisateur inconnu pour cet administrateur\");\n        }else if(error.response.status === 500){\n            throw new Error(\"Erreur de connexion\");\n        }\n\n    });\n    header = {\n        'Authorization': 'Bearer ' + reponse.data,\n        'Access-Control-Allow-Origin' : \"*\"\n    }\n    console.log(reponse.data);\n\n    return reponse.data;\n\n\n}\nconst getAllGarage = async ()=>{\n    const reponse = await axios.get(API_URL+\"garage/\",{\n    headers : header\n    }).catch(error=>{\n        if(error.response.status === 404)\n            throw new Error(\"Garage inconnu\");\n        else if(error.response.status === 500)\n            throw new Error(\"Erreur de connexion\");\n    });\n    console.log(JSON.stringify(reponse.data));\n    return reponse.data;\n}\nexport {\n    login,\n    getAllGarage\n}"],"sourceRoot":""}