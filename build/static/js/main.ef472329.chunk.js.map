{"version":3,"sources":["image/logo.jpg","component/API/API.js","component/Nav/SideBar.js","component/API/index.js","component/Login/Connection.js","routes/Routes.js","App.js","serviceWorker.js","store/index.js","index.js"],"names":["module","exports","API_URL","header","login","adresseMail","password","a","axios","post","headers","catch","error","response","status","Error","reponse","data","token","getAllGarage","get","console","log","JSON","stringify","deleteGarage","idGarage","delete","id","postGarage","nom","adresse","numTel","image","updateGarage","patch","getAllMecanicien","deleteMecanicien","idMecanicien","updateMecanicien","prenom","postMecanicien","garage_fk","getAllDispo","deleteDispo","mecanicien_fk","updateDispo","date","isbooked","idMecano","idReparation","isBooked","postDispo","SideBar","className","src","Logo","alt","onClick","window","location","pathname","React","Component","api","require","undefined","Connection","props","state","email","loaded","loading","errorMassage","connected","this","user","userRecup","userType","setState","errorMessage","evt","target","value","to","type","placeholder","onChange","event","userChange","autoFocus","required","passwordChange","handleSubmit","connect","dispatch","payload","userInfo","Routes","isConnected","userStore","exact","path","component","onEnter","App","Boolean","hostname","match","store","createStore","combineReducers","action","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"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","file":"static/js/main.ef472329.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3949abdf.jpg\";","import axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:3001/\";\r\nlet header = {'Access-Control-Allow-Origin' : \"*\"}\r\n\r\nconst login = async(adresseMail,password)=>{\r\n    const reponse = await axios.post(API_URL+\"user/admin\",{\r\n        adresseMail,\r\n        password\r\n    },{\r\n        headers : header\r\n    }).catch(error=>{\r\n\r\n        if(error.response.status === 400){\r\n            throw new Error(\"Les identifiants n'existent pas dans la base de donnÃ©es\");\r\n        }else if(error.response.status === 404){\r\n            throw new Error(\"Utilisateur inconnu pour cet administrateur\");\r\n        }else if(error.response.status === 500){\r\n            throw new Error(\"Erreur de connexion\");\r\n        }\r\n\r\n    });\r\n    header = {\r\n        'Authorization': 'Bearer ' + reponse.data.token,\r\n        'Accept-version' : \"1.0.0\",\r\n        'Access-Control-Allow-Origin' : \"*\"\r\n    }\r\n\r\n\r\n    return reponse.data;\r\n\r\n\r\n}\r\nconst getAllGarage = async ()=>{\r\n    const reponse = await axios.get(API_URL+\"garage/\",{\r\n    headers : header\r\n    }).catch(error=>{\r\n        if(error.response.status === 404)\r\n            throw new Error(\"Garage inconnu\");\r\n        else if(error.response.status === 500)\r\n            throw new Error(\"Erreur de connexion\");\r\n    });\r\n    console.log(JSON.stringify(reponse.data));\r\n    return reponse.data;\r\n}\r\nconst deleteGarage = async(idGarage)=>{\r\n    const reponse = await axios.delete(API_URL+\"garage/\",{\r\n        headers:header,\r\n        data:{\r\n            id : idGarage\r\n        }\r\n    }).catch(error=>{\r\n        if(error.response.status === 404)\r\n        throw new Error(\"Garage inconnu\");\r\n    });\r\n    return reponse.status;\r\n}\r\nconst postGarage = async(nom,adresse,numTel,image)=>{\r\n    console.log(nom,adresse,numTel,image);\r\n    const reponse = await axios.post(API_URL+\"garage/\", {\r\n        nom:nom,\r\n        adresse:adresse,\r\n        numTel:numTel,\r\n        image:image\r\n    },{\r\n        headers : header\r\n    }).catch(error=>{\r\n        if(error.response.status===500){\r\n            throw new Error(\"Erreur sdur le serveur\")\r\n        }else if(error.response.status === 400){\r\n            throw new Error(\"Erreur sur les Ã©lÃ©ments de la requÃªte\");\r\n        }\r\n    });\r\n    return reponse.data;\r\n}\r\nconst updateGarage = async(id,nom,adresse,numTel)=>{\r\n    console.log(nom);\r\n    const reponse = await axios.patch(API_URL+\"garage/\",{\r\n        headers:header,\r\n        data : {\r\n            id : id,\r\n            nom:nom,\r\n            adresse: adresse,\r\n            numTel : numTel\r\n        }\r\n    }).catch(error=>{\r\n        if(error.response.status === 500){\r\n            throw new Error(\"Ressource manquante\");\r\n        }\r\n    });\r\n    return reponse.data;\r\n}\r\nconst getAllMecanicien = async()=>{\r\n    const reponse = await axios.get(API_URL+\"mecano/\",{\r\n        headers : header\r\n    }).catch(error=>{\r\n        if(error.response.status === 404)\r\n            throw new Error(\"Pas de mÃ©canicien dans la base de dinnÃ©es\");\r\n        else if(error.response.status === 500)\r\n            throw new Error(\"Erreur de connexion\");\r\n    })\r\n    return reponse.data;\r\n}\r\nconst deleteMecanicien =  async(idMecanicien)=>{\r\n    const reponse = await axios.delete(API_URL+\"mecano/\",{\r\n        headers:header,\r\n        data:{\r\n            id : idMecanicien\r\n        }\r\n    }).catch(error=>{\r\n        if(error.response.status === 404)\r\n            throw new Error(\"Mecano inconnu\");\r\n    });\r\n    return reponse.status;\r\n}\r\nconst updateMecanicien= async(id,nom,prenom,password)=>{\r\n    const reponse = await axios.patch(API_URL+\"mecano/\",{\r\n        headers:header,\r\n        data : {\r\n            id : id,\r\n            nom:nom,\r\n            prenom: prenom,\r\n            password : password\r\n        }\r\n    }).catch(error=>{\r\n        if(error.response.status === 500){\r\n            throw new Error(\"Ressource manquante\");\r\n        }\r\n    });\r\n    return reponse.data;\r\n}\r\nconst postMecanicien = async(nom,prenom,password,adresseMail,garage_fk)=>{\r\n    console.log(nom,prenom,password,adresseMail,garage_fk);\r\n    const reponse = await axios.post(API_URL+\"mecano/\", {\r\n        nom:nom,\r\n        prenom:prenom,\r\n        password:password,\r\n        adresseMail:adresseMail,\r\n        garage_fk : garage_fk\r\n    },{\r\n        headers : header\r\n    }).catch(error=>{\r\n        if(error.response.status===500){\r\n            throw new Error(\"Erreur sdur le serveur\")\r\n        }else if(error.response.status === 400){\r\n            throw new Error(\"Erreur sur les Ã©lÃ©ments de la requÃªte\");\r\n        }\r\n    });\r\n    return reponse.data;\r\n}\r\nconst getAllDispo = async()=>{\r\n    const reponse = await axios.get(API_URL+\"dispo/\",{\r\n        headers : header\r\n    }).catch(error=>{\r\n        if(error.response.status === 404)\r\n            throw new Error(\"Pas de mÃ©canicien dans la base de dinnÃ©es\");\r\n        else if(error.response.status === 500)\r\n            throw new Error(\"Erreur de connexion\");\r\n    })\r\n    return reponse.data;\r\n}\r\nconst deleteDispo =  async(id,mecanicien_fk)=>{\r\n    const reponse = await axios.delete(API_URL+\"dispo/\",{\r\n        headers:header,\r\n        data:{\r\n            id : id,\r\n            mecanicien_fk : mecanicien_fk\r\n        }\r\n    }).catch(error=>{\r\n        if(error.response.status === 404)\r\n            throw new Error(\"Mecano inconnu\");\r\n    });\r\n    return reponse.status;\r\n}\r\nconst updateDispo= async(id,date,isbooked,idMecano,idReparation)=>{\r\n    const reponse = await axios.patch(API_URL+\"dispo/\",{\r\n        headers:header,\r\n        data : {\r\n            id : id,\r\n            date:date,\r\n            isBooked: isbooked,\r\n            idMecano : idMecano,\r\n            idReparation : idReparation\r\n        }\r\n    }).catch(error=>{\r\n        if(error.response.status === 500){\r\n            throw new Error(\"Ressource manquante\");\r\n        }\r\n    });\r\n    return reponse.data;\r\n}\r\nconst postDispo = async(date,isBooked,idMecanicien,idReparation)=>{\r\n    const reponse = await axios.post(API_URL+\"dispo/\", {\r\n        date:date,\r\n        isBooked:isBooked,\r\n        idMecanicien:idMecanicien,\r\n        idReparation:idReparation,\r\n    },{\r\n        headers : header\r\n    }).catch(error=>{\r\n        if(error.response.status===500){\r\n            throw new Error(\"Erreur sdur le serveur\")\r\n        }else if(error.response.status === 400){\r\n            throw new Error(\"Erreur sur les Ã©lÃ©ments de la requÃªte\");\r\n        }\r\n    });\r\n    return reponse.data;\r\n}\r\n\r\nexport {\r\n    login,\r\n    getAllGarage,\r\n    deleteGarage,\r\n    postGarage,\r\n    updateGarage,\r\n    getAllMecanicien,\r\n    deleteMecanicien,\r\n    updateMecanicien,\r\n    postMecanicien,\r\n    getAllDispo,\r\n    deleteDispo,\r\n    updateDispo,\r\n    postDispo,\r\n\r\n}","import React from 'react';\r\nimport \"./SideBar.css\";\r\nimport Logo from \"../../image/logo.jpg\"\r\n\r\nclass SideBar extends React.Component{\r\n render() {\r\n    return (\r\n        <div className=\"SidBar\">\r\n            <img src={Logo} alt=\"logo\"></img>\r\n            <ul>\r\n                <li \r\n                onClick={() => window.location.pathname = \"/Garage\"}\r\n                id={window.location.pathname === \"/Garage\" ? \"active\" : \"\"}\r\n                >\r\n                    Garage\r\n                </li>\r\n           \r\n                <li \r\n                onClick={() => window.location.pathname = \"/Mecano\"}\r\n                id={window.location.pathname === \"/Mecano\" ? \"active\" : \"\"}\r\n                >\r\n                    Mecano\r\n                </li>\r\n  \r\n                <li \r\n                onClick={() => window.location.pathname = \"/Dispos\"}\r\n                id={window.location.pathname === \"/Dispos\" ? \"active\" : \"\"}\r\n                >\r\n                    Dispos\r\n                </li>\r\n\r\n                <li \r\n                onClick={() => window.location.pathname = \"/Logout\"}\r\n                id={window.location.pathname === \"/Logout\" ? \"active\" : \"\"}\r\n                >\r\n                    Logout\r\n                </li>\r\n            </ul>\r\n\r\n        </div>\r\n    )\r\n}\r\n}\r\nexport default SideBar\r\n","const api = require('./API');\r\n\r\nconst login = async(adresseMail,password)=>{\r\n    if(adresseMail!==undefined && password!==undefined){\r\n        return await api.login(adresseMail,password);\r\n    }else\r\n        throw new Error(\"Identfiants manquants\");\r\n}\r\nconst getAllGarage = async ()=>{\r\n    return await api.getAllGarage();\r\n}\r\nconst deleteGarage = async (idGarage)=>{\r\n    if(idGarage!==undefined){\r\n        return await api.deleteGarage(idGarage);\r\n    }else{\r\n        throw new Error(\"Identifiant du garage incorrect\");\r\n    }\r\n}\r\nconst postGarage = async(garage)=>{\r\n    console.log(garage);\r\n    if(garage !== undefined){\r\n        return await api.postGarage(garage.name,garage.address,garage.phoneNumber,garage.image);\r\n    }else{\r\n        throw new Error(\"Erreur composant le garage manquant\");\r\n    }\r\n}\r\nconst updateGarage = async(id,nom,adresse,numTel)=>{\r\n    console.log(id+nom+adresse+numTel);\r\n    if(id!==undefined && nom !== undefined && adresse !== undefined && numTel!== undefined){\r\n        return await api.updateGarage(id,nom,adresse,numTel);\r\n    }else\r\n    {\r\n        throw new Error(\"Les informations Ã  envoyer Ã  l'pi ne sont pas bonnes\");\r\n    }\r\n}\r\nconst getAllMecanicien = async()=>{\r\n    return await api.getAllMecanicien();\r\n}\r\nconst deleteMecanicien = async (idMecano)=>{\r\n    if(idMecano!==undefined){\r\n        return await api.deleteGarage(idMecano);\r\n    }else{\r\n        throw new Error(\"Identifiant du mÃ©canicien incorrect\");\r\n    }\r\n}\r\nconst updateMecanicien = async(id,nom,prenom,password)=>{\r\n    if(id!==undefined && nom !== undefined && prenom !== undefined && password!== undefined){\r\n        return await api.updateMecanicien(id,nom,prenom,password);\r\n    }else\r\n    {\r\n        throw new Error(\"Les informations Ã  envoyer Ã  l'pi ne sont pas bonnes\");\r\n    }\r\n}\r\nconst postMecano = async(mecano)=>{\r\n    if(mecano !== undefined){\r\n        return await api.postMecanicien(mecano.nom,mecano.prenom,mecano.password,mecano.adresseMail,mecano.garage_fk);\r\n    }else{\r\n        throw new Error(\"Erreur composant le garage manquant\");\r\n    }\r\n}\r\nconst postDispo = async(dispo)=>{\r\n    if(dispo !== undefined){\r\n        return await api.postDispo(dispo.date,dispo.isBooked,dispo.idMecano,dispo.idReparation);\r\n    }else{\r\n        throw new Error(\"Erreur composant le garage manquant\");\r\n    }\r\n}\r\nconst getAllDispo = async()=>{\r\n    return await api.getAllDispo();\r\n}\r\nconst upDateDispo = async(id,date,isbooked,idMecanicien,idReparation)=>{\r\n    if(id!== undefined && date!== undefined && isbooked !== undefined && idMecanicien !== undefined && idReparation !== undefined){\r\n        return await api.updateDispo(id,date,isbooked,idMecanicien,idReparation);\r\n    }else{\r\n        throw new Error(\"Erreur lors de l'ajout du composant\");\r\n    }\r\n\r\n}\r\nconst deleteDispo = async(id,idMecano)=>{\r\n    if(id!== undefined && idMecano!== undefined){\r\n        return await api.deleteDispo(id,idMecano);\r\n    }else{\r\n        throw new Error(\"Erreur lors de l'effacement du composant\");\r\n    }\r\n}\r\nexport {\r\n    login,\r\n    getAllGarage,\r\n    deleteGarage,\r\n    postGarage,\r\n    updateGarage,\r\n    getAllMecanicien,\r\n    deleteMecanicien,\r\n    updateMecanicien,\r\n    postMecano,\r\n    postDispo,\r\n    getAllDispo,\r\n    upDateDispo,\r\n    deleteDispo\r\n}","import React from \"react\";\r\nimport \"./connectionStyle.css\";\r\nimport {login} from \"../API\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\n\r\nclass Connection extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            email: '',\r\n            password:'',\r\n            loaded:false,\r\n            loading:false,\r\n        errorMassage:false,\r\n        connected:false};\r\n    }\r\n\r\n    async handleSubmit(){\r\n        try{\r\n            const data = await login(this.state.email,this.state.password);\r\n            if(data.user.userRecup.userType !== \"mecano\") {\r\n                throw new Error(\"Un client ne peut pas se connecter Ã  l'application!\");\r\n            }\r\n            this.props.login(data.user.userRecup);\r\n            console.log(this.props.user.userType);\r\n            this.setState({connected:true});\r\n        }catch (error) {\r\n            this.setState({\r\n                error : true,\r\n                loading:false,\r\n                loaded:true,\r\n                errorMessage:error\r\n            });\r\n        }\r\n    }\r\n    userChange(evt){\r\n        this.setState({email:evt.target.value});\r\n    }\r\n    passwordChange(evt){\r\n        this.setState({password:evt.target.value});\r\n    }\r\n\r\n\r\n    render() {\r\n            if(this.state.connected){\r\n                return <Redirect to={\"/\"}/>\r\n            }\r\n            // // let contentMessage;\r\n            // if(!this.state.loaded)\r\n            //     contentMessage = null;\r\n            // else if(this.state.loading){\r\n            //     contentMessage = <Grid item><Typography component={\"h6\"} color={\"error\"}>Chargement en cours</Typography> </Grid>;\r\n            // }else if(this.state.error){\r\n            //     contentMessage = <Grid item><Typography component={\"h6\"} color={\"error\"}>{this.state.errorMassage}</Typography> </Grid>\r\n            // }\r\n            return (\r\n                <div className=\"form\">\r\n                    <h1>Se connecter</h1>\r\n                    <form className=\"row g-3\">\r\n                    <input\r\n                     className=\"form-control\"\r\n                     type=\"text\"\r\n                     id=\"emailAdresse\"\r\n                     placeholder=\"Adresse mail\"\r\n                     value = {this.state.email}\r\n                     onChange ={(event)=>this.userChange(event)}\r\n                     autoFocus\r\n                     required\r\n                     ></input>\r\n\r\n                    <input\r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    id=\"password\"\r\n                    placeholder=\"Password\"\r\n                    value = {this.state.password}\r\n                    onChange ={(event)=>this.passwordChange(event)}\r\n                    required\r\n                    ></input>\r\n                    <button \r\n                    type=\"submit\" \r\n                    className=\"btn btn-primary\"\r\n                    onClick ={()=>{\r\n                        this.handleSubmit();\r\n                    }}\r\n                    >Connexion</button>\r\n                    </form>\r\n                </div>\r\n            )\r\n\r\n\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch)=>{\r\n    return {\r\n        login : (user)=>{\r\n            dispatch({type:\"login\", payload:{userInfo:user}})\r\n        }\r\n    }\r\n}\r\nexport default connect(undefined,mapDispatchToProps)(Connection);","import React from \"react\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect,\r\n    \r\n} from \"react-router-dom\";\r\n\r\nimport SideBar from \"../component/Nav/SideBar\"\r\nimport Connection from \"../component/Login/Connection\"\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n\r\nclass Routes extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {isConnected :undefined}\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if(this.state.user === undefined){\r\n            this.setState({user:this.props.userStore});\r\n        }\r\n        \r\n    }\r\n\r\n    \r\n    render() {\r\n        const HomeComponent = () => this.state.isConnected ? <SideBar/> : <Redirect to={\"/login\"}/>\r\n        const LoginComponent = () => this.state.isConnected ? <Redirect to={\"/\"}/> : <Connection/>\r\n        return (\r\n            <div >\r\n                <Router>\r\n                    <Switch>\r\n                        <Route exact path=\"/login\" component={LoginComponent}/>\r\n                        <Route path=\"/\" component={HomeComponent}/>\r\n                        <Route path=\"/Logout\" onEnter={() => this.props.login(undefined)}/>\r\n                        {/* <Route path=\"/login\" component={Login}/> */}\r\n\r\n                        {/* <Route path=\"/menu\" render={()=>{\r\n                            return this.state.user === undefined ? <Redirect to=\"/login\"/>:\r\n                                (this.state.user.userType === \"mecano\")? <Menu/> : <Redirect to={\"/\"}/>\r\n                        }}/>\r\n\r\n                        <Route path=\"/garages\" render={()=>{\r\n                        return this.state.user === undefined? <Redirect to={\"/login\"}/> : (this.state.user.userType === \"mecano\")?<Tableau getAllElements = {getAllGarage} deleteElement = {deleteGarage} updateGarage = {updateGarage} postGarage = {postGarage}/> : <Redirect to={'/login'}/>\r\n                        }}/>\r\n\r\n                        <Route path=\"/mecano\" render={()=>{\r\n                            return this.state.user === undefined? <Redirect to={\"/login\"}/> : (this.state.user.userType === \"mecano\")?<Tableau getAllElements = {getAllMecanicien} deleteElement = {deleteMecanicien} updateGarage = {updateMecanicien} postGarage = {postMecano}/> : <Redirect to={'/login'}/>\r\n                        }}/>\r\n                        <Route path=\"/dispos\" render={()=>{\r\n                            return this.state.user === undefined? <Redirect to={\"/login\"}/> : (this.state.user.userType === \"mecano\")?<Tableau getAllElements = {getAllDispo} deleteElement = {deleteDispo} updateGarage = {upDateDispo} postGarage = {postDispo}/> : <Redirect to={'/login'}/>\r\n\r\n                        }}/> */}\r\n\r\n\r\n\r\n                    </Switch>\r\n                </Router>\r\n            </div>\r\n        );\r\n}\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        userStore: state.login.userStore,\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Routes);","import Routes from \"./routes/Routes\";\r\nimport React from \"react\";\r\nimport './App.css';\r\nfunction App() {\r\n  return (\r\n      <div className=\"App\">\r\n          <Routes/>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createStore, combineReducers } from \"redux\";\r\n\r\nconst userReducer = (state = {user : {}}, action) => {\r\n\r\n    switch (action.type) {\r\n        case \"login\" :\r\n            return {userStore : action.payload.userInfo};\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nconst store = createStore(combineReducers({ login: userReducer}));\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./store\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}><App/></Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}