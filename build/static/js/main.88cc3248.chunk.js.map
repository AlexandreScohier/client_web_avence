{"version":3,"sources":["component/API/index.js","component/Connection.js","component/Menu.js","component/Garage/AddGarage.js","component/Garage/RowReadGarage.js","component/Garage/RowEditGarage.js","component/Garage/GarageTable.js","component/Garage/SelectMechanics.js","routes/Routes.js","component/Garage/MechanicTableSelected.js","App.js","serviceWorker.js","store/index.js","index.js","component/API/API.js"],"names":["api","require","login","adresseMail","password","a","undefined","Error","getAllGarage","deleteGarage","idGarage","postGarage","garage","console","log","name","address","phoneNumber","image","updateGarage","id","nom","adresse","numTel","getAllMecanicien","deleteMecanicien","idMecano","updateMecanicien","prenom","postMecano","mecano","postMecanicien","garage_fk","Connection","props","state","email","loaded","loading","errorMassage","connected","this","setState","error","errorMessage","data","user","userRecup","userType","evt","target","value","contentMessage","to","Grid","item","Typography","component","color","className","container","justify","direction","spacing","TextField","type","label","onChange","event","userChange","required","autoFocus","passwordChange","onKeyPress","code","dissmisError","handleSubmit","then","Button","variant","onClick","React","Component","connect","dispatch","payload","userInfo","Menu","prevProps","prevState","snapshot","Link","userStore","AddGarage","renderTableHeader","element","key","map","column","index","functionName","nameChange","phoneNumberChange","addressChange","placeholder","imageChange","submit","RowReadGarage","handleEditClick","height","width","src","RowEditGarage","TableauGarage","preventDefault","idEdit","getAllElements","deleteElement","elements","idDelete","response","catch","tab","titles","push","title","handleDeleteClick","SelectMechanics","handleSelection","onSubmit","handleChange","Routes","path","Login","render","App","Boolean","window","location","hostname","match","store","createStore","combineReducers","action","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","API_URL","header","axios","post","headers","status","reponse","token","get","JSON","stringify","delete","patch","idMecanicien"],"mappings":"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","file":"static/js/main.88cc3248.chunk.js","sourcesContent":["const api = require('./API');\r\n\r\nconst login = async(adresseMail,password)=>{\r\n    if(adresseMail!==undefined && password!==undefined){\r\n        return await api.login(adresseMail,password);\r\n    }else\r\n        throw new Error(\"Identfiants manquants\");\r\n}\r\nconst getAllGarage = async ()=>{\r\n    return await api.getAllGarage();\r\n}\r\nconst deleteGarage = async (idGarage)=>{\r\n    if(idGarage!==undefined){\r\n        return await api.deleteGarage(idGarage);\r\n    }else{\r\n        throw new Error(\"Identifiant du garage incorrect\");\r\n    }\r\n}\r\nconst postGarage = async(garage)=>{\r\n    console.log(garage);\r\n    if(garage !== undefined){\r\n        return await api.postGarage(garage.name,garage.address,garage.phoneNumber,garage.image);\r\n    }else{\r\n        throw new Error(\"Erreur composant le garage manquant\");\r\n    }\r\n}\r\nconst updateGarage = async(id,nom,adresse,numTel)=>{\r\n    if(id!==undefined && nom !== undefined && adresse !== undefined && numTel!== undefined){\r\n        return await api.updateGarage(id,nom,adresse,numTel);\r\n    }{\r\n        throw new Error(\"Les informations à envoyer à l'pi ne sont pas bonnes\");\r\n    }\r\n}\r\nconst getAllMecanicien = async()=>{\r\n    return await api.getAllMecanicien();\r\n}\r\nconst deleteMecanicien = async (idMecano)=>{\r\n    if(idMecano!==undefined){\r\n        return await api.deleteGarage(idMecano);\r\n    }else{\r\n        throw new Error(\"Identifiant du mécanicien incorrect\");\r\n    }\r\n}\r\nconst updateMecanicien = async(id,nom,prenom,password)=>{\r\n    if(id!==undefined && nom !== undefined && prenom !== undefined && password!== undefined){\r\n        return await api.updateMecanicien(id,nom,prenom,password);\r\n    }{\r\n        throw new Error(\"Les informations à envoyer à l'pi ne sont pas bonnes\");\r\n    }\r\n}\r\nconst postMecano = async(mecano)=>{\r\n    if(mecano !== undefined){\r\n        return await api.postMecanicien(mecano.nom,mecano.prenom,mecano.password,mecano.adresseMail,mecano.garage_fk);\r\n    }else{\r\n        throw new Error(\"Erreur composant le garage manquant\");\r\n    }\r\n}\r\nexport {\r\n    login,\r\n    getAllGarage,\r\n    deleteGarage,\r\n    postGarage,\r\n    updateGarage,\r\n    getAllMecanicien,\r\n    deleteMecanicien,\r\n    updateMecanicien,\r\n    postMecano\r\n}","import React, {useState} from \"react\";\r\nimport \"../style/connectionStyle.css\";\r\nimport {login} from \"./API\";\r\nimport {\r\n    Button,\r\n    TextField,\r\n    Grid,\r\n    Paper,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n\r\nclass Connection extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            password:'',\r\n            loaded:false,\r\n            loading:false,\r\n        errorMassage:false,\r\n        connected:false};\r\n\r\n    }\r\n    dissmisError(){\r\n        this.setState({error:\"\"});\r\n    }\r\n    async handleSubmit(){\r\n        this.setState({error:false,\r\n        errorMessage:\"\",\r\n        loading:true,\r\n        loaded:false});\r\n        try{\r\n            const data = await login(this.state.email,this.state.password);\r\n            if(data.user.userRecup.userType !== \"mecano\") {\r\n                throw new Error(\"Un client ne peut pas se connecter à l'application!\");\r\n            }\r\n            this.props.login(data.user.userRecup);\r\n            this.setState({\r\n                connected:true});\r\n        }catch (error) {\r\n            this.setState({\r\n                error : true,\r\n                loading:false,\r\n                loaded:true,\r\n                errorMessage:error\r\n            });\r\n        }\r\n    }\r\n    userChange(evt){\r\n        this.setState({email:evt.target.value});\r\n    }\r\n    passwordChange(evt){\r\n        this.setState({password:evt.target.value});\r\n    }\r\n\r\n\r\n    render() {\r\n            if(this.state.connected){\r\n                return <Redirect to={\"/menu\"}/>\r\n            }\r\n            let contentMessage;\r\n            if(!this.state.loaded)\r\n                contentMessage = null;\r\n            else if(this.state.loading){\r\n                contentMessage = <Grid item><Typography component={\"h6\"} color={\"error\"}>Chargement en cours</Typography> </Grid>;\r\n            }else if(this.state.error){\r\n                contentMessage = <Grid item><Typography component={\"h6\"} color={\"error\"}>{this.state.errorMassage}</Typography> </Grid>\r\n            }\r\n            return (\r\n                <div className=\"gridConnection\">\r\n                <Grid container  justify={\"center\"} direction={\"row\"}>\r\n                    <Grid item>\r\n                        <Grid container direction={\"column\"} justify={\"center\"} className={\"login-form\"}>\r\n                            <Grid item>\r\n                                <Typography component={\"h1\"}>Se connecter</Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Grid container direction={\"column\"} spacing={3}>\r\n                                    <Grid item>\r\n                                        <TextField\r\n                                        type={\"text\"}\r\n                                        label={\"Adresse mail\"}\r\n                                        value={this.state.email}\r\n                                        onChange={(event)=>this.userChange(event)} required={true} autoFocus\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <TextField\r\n                                        type={\"password\"}\r\n                                        label={\"Mot de passe\"}\r\n                                        value={this.state.password}\r\n                                        onChange={(event)=>this.passwordChange(event)}\r\n                                        onKeyPress={(event)=>{\r\n                                            if(event.code === \"Enter\" || event.code === \"NumpadEnter\") {\r\n                                                this.dissmisError();\r\n                                                this.handleSubmit().then();\r\n                                            }\r\n                                        }}\r\n                                        required\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <Button\r\n                                            variant={\"contained\"}\r\n                                            type={\"submit\"}\r\n                                            className={\"button-block\"}\r\n                                            onClick={()=>{\r\n                                                this.dissmisError();\r\n                                                this.handleSubmit();\r\n                                            }}>\r\n                                            Connexion\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    {contentMessage && contentMessage}\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                </div>\r\n            )\r\n\r\n\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch)=>{\r\n    return {\r\n        login : (user)=>{\r\n            dispatch({type:\"login\", payload:{userInfo:user}})\r\n        }\r\n    }\r\n}\r\nexport default connect(undefined,mapDispatchToProps)(Connection);","import React, {useState} from \"react\";\r\nimport \"../style/menuStyle.css\";\r\nimport \"../style/mainStyle.css\";\r\nimport {\r\n    Button\r\n} from \"@material-ui/core\";\r\nimport {Link, Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nclass Menu extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user : this.props.user\r\n        }\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"menu\">\r\n                <Button\r\n                    variant={\"contained\"}\r\n                    component={Link} to={\"/garages\"}>\r\n                    Modifier les garages\r\n                </Button>\r\n                <Button\r\n                    variant={\"contained\"}\r\n                    component={Link} to={\"/mechanics\"}>\r\n                    Modifier les mécaniciens\r\n                </Button>\r\n                <Button\r\n                    variant={\"contained\"}\r\n                    component={Link} to={\"/schedules\"}>\r\n                    Modifier les horaires\r\n                </Button>\r\n                <Button\r\n                    variant={\"contained\"}\r\n                    component={Link} to={\"/repairs\"}>\r\n                    Modifier les reparations\r\n                </Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state)=>{\r\n    console.log(\"Matthys\");\r\n    return {\r\n        user : state.userStore\r\n    }\r\n}\r\nconst dispatchToProps = (dispatch)=>{\r\n    return {\r\n        login : (user)=>{\r\n            dispatch({type:\"login\", payload:{userInfo:user}})\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,dispatchToProps)(Menu);","import React from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport {postGarage} from \"../API/index\";\r\n\r\n\r\nclass AddGarage extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.renderTableHeader = this.props.renderTableHeader;\r\n        this.state = {\r\n            name: \"\",\r\n            address: \"\",\r\n            phoneNumber: \"\",\r\n            image: \"\",\r\n            element : props.element}\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if(this.props !== prevProps){\r\n            this.setState({element:this.props.element});\r\n        }\r\n    }\r\n\r\n    nameChange(evt){\r\n        this.setState({name:evt.target.value});\r\n    }\r\n    addressChange(evt){\r\n        this.setState({address:evt.target.value});\r\n    }\r\n    phoneNumberChange(evt){\r\n        this.setState({phoneNumber:evt.target.value});\r\n    }\r\n    imageChange(evt){\r\n        this.setState({image:evt.target.value});\r\n    }\r\n    submit(name,address,phoneNumber,image){\r\n        const data = postGarage({name:name,address:address,phoneNumber: phoneNumber,image:image});\r\n    }\r\n    render() {\r\n        console.log(this.state.element);\r\n        return(\r\n            <div className=\"AddGarage\">\r\n                <h1 key={\"title\"}>Ajouter un garage</h1>\r\n                {\r\n                    this.renderTableHeader(this.state.element).map((column,index)=>{\r\n                        let functionName;\r\n                        console.log(column);\r\n                        switch(column){\r\n                            case \"nom\" :  functionName = this.nameChange;\r\n                            break;\r\n                            case\"numtel\" : functionName = this.phoneNumberChange;\r\n                            break;\r\n                            case \"adresse\" : functionName = this.addressChange;\r\n                            break;\r\n                        }\r\n                        if(column !== \"image\"){\r\n                            return(\r\n                                <input\r\n                                    key={index}\r\n                                    type={\"text\"}\r\n                                    name={this.state.element[`${column}`] ?? \"\"}\r\n                                    placeholder={this.state.element[`${column}`]}\r\n                                    onChange={(event)=>functionName(event)}\r\n                                    required\r\n                               />\r\n                                )}else {\r\n                            return (\r\n                                <input\r\n                                    key={index}\r\n                                    type={\"text\"}\r\n                                    name={this.state.element[`${column}`]}\r\n                                    placeholder={this.state.element[`${column}`]}\r\n                                    onChange={event => this.imageChange(event)}\r\n                                    required\r\n                                />);\r\n                        }\r\n                    })\r\n                }\r\n                <button type={\"submit\"} onClick={()=>this.submit(this.state.name,this.state.address,this.state.phoneNumber,this.state.image)}>Add</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default AddGarage;","import React from \"react\";\r\nimport {Button, TextField} from \"@material-ui/core\";\r\n\r\nconst RowReadGarage = ({element, handleEditClick ,index,renderTableHeader}) =>{\r\n    return(\r\n        <tr>\r\n            {\r\n                 renderTableHeader(element).map((column,index)=>{\r\n                    if(column !== \"image\") {\r\n                        return <td key={index}>{element[`${column}`]}</td>;\r\n                    }else{\r\n                        return <td key={index}><img height={\"60px\"} width={\"60px\"} src={element[`${column}`]}/></td>;\r\n                    }\r\n                })\r\n            }\r\n            <td>\r\n                <button type=\"button\" onClick= {(event => handleEditClick(event,index))}>\r\n                    edit\r\n                </button>\r\n                <button type=\"button\" onClick={()=>handleEditClick(element.id)}>\r\n                    delete\r\n                </button>\r\n            </td>\r\n        </tr>\r\n    );\r\n\r\n}\r\n\r\nexport default RowReadGarage;","import React from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport \"../../style/tableStyle.css\"\r\n\r\nconst RowEditGarage = ({handleEditClick, element, renderTableHeader}) =>{\r\n    return(\r\n        <tr>\r\n            {\r\n                renderTableHeader(element).map((column,index)=>{\r\n                    return <td>\r\n                            <input\r\n                            type={\"text\"}\r\n                            name={element[`${column}`]}\r\n                            placeholder={element[`${column}`]}\r\n                            value={element[`${column}`]}\r\n                            required\r\n                        >{element[`${column}`]}</input>\r\n                        </td>;\r\n                })\r\n            }\r\n            <td>\r\n                <button type=\"button\">\r\n                    save\r\n                </button>\r\n                <button type=\"button\" onClick= {(event => handleEditClick(event,null))}>\r\n                    cancel\r\n                </button>\r\n            </td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default RowEditGarage;","import React,{Fragment, useState} from \"react\";\r\nimport AddGarage from \"./AddGarage\";\r\nimport RowReadGarage from \"./RowReadGarage\";\r\nimport RowEditGarage from \"./RowEditGarage\";\r\nimport \"../../style/tableStyle.css\";\r\nimport {getAllGarage} from \"../API\";\r\n\r\nclass TableauGarage extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.getAllElements = this.props.getAllElements;\r\n        this.deleteElement = this.props.deleteElement;\r\n        this.updateGarage = this.props.updateGarage;\r\n        this.postGarage = this.props.postGarage;\r\n        this.state = {\r\n            elements: [],\r\n            idEdit: null,\r\n            idDelete: null,\r\n        }\r\n\r\n    }\r\n    componentDidMount() {\r\n        this.getAllElements().then(response=>this.setState({elements:response})).catch(error=>console.error(error));\r\n    }\r\n\r\n    handleEditClick = (event, index) => {\r\n        event.preventDefault();\r\n        this.setState({idEdit : index});\r\n    }\r\n\r\n    renderTableHeader(tab) {\r\n        let titles = [];\r\n        for (let name in tab) {\r\n            if (name !== \"id\") {\r\n                titles.push(name);\r\n            }\r\n        }\r\n        return titles;\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            {\r\n                                this.renderTableHeader(this.state.elements[0]).map((title,index)=>{\r\n                                        return <th key={index}>{title}</th>;\r\n\r\n                                })\r\n                            }\r\n                            <th key={\"titleTh\"}>Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {\r\n                        this.state.elements.map((element,index)=>(\r\n                            <Fragment key={index}>\r\n                                { this.state.idEdit === index ? (\r\n                                    <RowEditGarage handleEditClick = {this.handleEditClick} element={element} renderTableHeader={this.renderTableHeader}/>\r\n                                ) : (\r\n                                    <RowReadGarage element={element} handleDeleteClick = {this.deleteElement} index={index} renderTableHeader={this.renderTableHeader}/>\r\n                                )}\r\n                            </Fragment>\r\n                            ))}\r\n                    </tbody>\r\n                </table>\r\n                    <AddGarage renderTableHeader={this.renderTableHeader} element = {this.state.elements[0]}/>\r\n                </form>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\nexport default TableauGarage;","import React, {Component} from \"react\";\r\nimport \"../../style/SelectMechanicsStyle.css\"\r\n\r\nclass SelectMechanics extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {value : null};\r\n        this.handleSelection = this.props.handleSelection\r\n    }\r\n    handleChange(event) {\r\n        this.setState({value: event.target.value});\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.handleSelection(event, this.state.value);\r\n    }\r\n\r\n\r\n    render() {\r\n        return(\r\n            <form onSubmit={this.handleSubmit} className=\"SelectMechanics\">\r\n                <label>\r\n                    Choisissez un mécanicien :\r\n                    <select value={this.state.value} onChange={this.handleChange}>\r\n                        <option value=\"X\">X</option>\r\n                        <option value=\"X\">X</option>\r\n                    </select>\r\n                </label>\r\n                <input type=\"submit\" value=\"Envoyer\" />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SelectMechanics;","import React from \"react\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect\r\n} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport Login from \"../component/Connection\";\r\nimport Menu from \"../component/Menu\";\r\nimport Tableau from \"../component/Garage/GarageTable\"\r\nimport MechanicTableSelected from \"../component/Garage/MechanicTableSelected\"\r\nimport {getAllGarage,deleteGarage,updateGarage,postGarage,getAllMecanicien,updateMecanicien,deleteMecanicien,postMecano} from \"../component/API\";\r\nclass Routes extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user : undefined\r\n        }\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if(this.state.user === undefined){\r\n            this.setState({user:this.props.userStore});\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Router>\r\n                    <Switch>\r\n                        <Route path=\"/login\" component={Login}/>\r\n\r\n                        <Route path=\"/menu\" render={()=>{\r\n                            return this.state.user === undefined ? <Redirect to=\"/login\"/>:\r\n                                (this.state.user.userType === \"mecano\")? <Menu/> : <Redirect to={\"/\"}/>\r\n                        }}/>\r\n\r\n                        <Route path=\"/garages\" render={()=>{\r\n                        return this.state.user === undefined? <Redirect to={\"/login\"}/> : (this.state.user.userType === \"mecano\")?<Tableau getAllElements = {getAllGarage} deleteElement = {deleteGarage} updateGarage = {updateGarage} postGarage = {postGarage}/> : <Redirect to={'/login'}/>\r\n                        }}/>\r\n\r\n                        <Route path=\"/mechanics\" render={()=>{\r\n                            return this.state.user === undefined? <Redirect to={\"/login\"}/> : (this.state.user.userType === \"mecano\")?<Tableau getAllElements = {getAllMecanicien} deleteElement = {deleteMecanicien} updateGarage = {updateMecanicien} postGarage = {postMecano}/> : <Redirect to={'/login'}/>\r\n                        }}/>\r\n\r\n\r\n\r\n                    </Switch>\r\n                </Router>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    console.log(state.login.userStore);\r\n    return {\r\n        userStore: state.login.userStore,\r\n    }\r\n};\r\nexport default connect(mapStateToProps)(Routes);","import React from \"react\";\r\nimport SelectMechanics from \"./SelectMechanics\";\r\nimport GarageTable from \"./GarageTable\";\r\n\r\nclass MechanicTableSelected extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {mechanic: null}\r\n    }\r\n\r\n    handleSelection = (event, mechanic) =>{\r\n        event.preventDefault();\r\n        this.state.setState({mechanic: mechanic})\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <SelectMechanics handleSelection = {this.handleSelection}/>\r\n                <GarageTable/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default MechanicTableSelected;","import React from 'react';\r\nimport './App.css';\r\nimport Routes from \"./routes/Routes\";\r\nimport SelectMechanics from \"./component/Garage/SelectMechanics\";\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\" >\r\n        <Routes/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createStore, combineReducers } from \"redux\";\r\n\r\nconst userReducer = (state = {user : {}}, action) => {\r\n\r\n    switch (action.type) {\r\n        case \"login\" :\r\n            return {userStore : action.payload.userInfo};\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nconst store = createStore(combineReducers({ login: userReducer}));\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}><App/></Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:3001/\";\r\nlet header = {'Access-Control-Allow-Origin' : \"*\"}\r\nconst login = async(adresseMail,password)=>{\r\n\r\n    const reponse = await axios.post(API_URL+\"user/admin\",{\r\n        adresseMail,\r\n        password\r\n    },{\r\n        headers : header\r\n    }).catch(error=>{\r\n\r\n        if(error.response.status === 400){\r\n            throw new Error(\"Les identifiants n'existent pas dans la base de données\");\r\n        }else if(error.response.status === 404){\r\n            throw new Error(\"Utilisateur inconnu pour cet administrateur\");\r\n        }else if(error.response.status === 500){\r\n            throw new Error(\"Erreur de connexion\");\r\n        }\r\n\r\n    });\r\n    header = {\r\n        'Authorization': 'Bearer ' + reponse.data.token,\r\n        'Accept-version' : \"1.0.0\",\r\n        'Access-Control-Allow-Origin' : \"*\"\r\n    }\r\n    console.log(header);\r\n    console.log(reponse.data);\r\n\r\n\r\n    return reponse.data;\r\n\r\n\r\n}\r\nconst getAllGarage = async ()=>{\r\n    const reponse = await axios.get(API_URL+\"garage/\",{\r\n    headers : header\r\n    }).catch(error=>{\r\n        if(error.response.status === 404)\r\n            throw new Error(\"Garage inconnu\");\r\n        else if(error.response.status === 500)\r\n            throw new Error(\"Erreur de connexion\");\r\n    });\r\n    console.log(JSON.stringify(reponse.data));\r\n    return reponse.data;\r\n}\r\nconst deleteGarage = async(idGarage)=>{\r\n    const reponse = await axios.delete(API_URL+\"garage/\",{\r\n        headers:header,\r\n        data:{\r\n            id : idGarage\r\n        }\r\n    }).catch(error=>{\r\n        if(error.response.status === 404)\r\n        throw new Error(\"Garage inconnu\");\r\n    });\r\n    return reponse.status;\r\n}\r\nconst postGarage = async(nom,adresse,numTel,image)=>{\r\n    console.log(nom,adresse,numTel,image);\r\n    const reponse = await axios.post(API_URL+\"garage/\", {\r\n        nom:nom,\r\n        adresse:adresse,\r\n        numTel:numTel,\r\n        image:image\r\n    },{\r\n        headers : header\r\n    }).catch(error=>{\r\n        if(error.response.status===500){\r\n            throw new Error(\"Erreur sdur le serveur\")\r\n        }else if(error.response.status === 400){\r\n            throw new Error(\"Erreur sur les éléments de la requête\");\r\n        }\r\n    });\r\n    return reponse.data;\r\n}\r\nconst updateGarage = async(id,nom,adresse,numTel)=>{\r\n    const reponse = await axios.patch(API_URL+\"garage/\",{\r\n        headers:header,\r\n        data : {\r\n            id : id,\r\n            nom:nom,\r\n            adresse: adresse,\r\n            numTel : numTel\r\n        }\r\n    }).catch(error=>{\r\n        if(error.response.status === 500){\r\n            throw new Error(\"Ressource manquante\");\r\n        }\r\n    });\r\n    return reponse.data;\r\n}\r\nconst getAllMecanicien = async()=>{\r\n    const reponse = await axios.get(API_URL+\"/mecano\",{\r\n        headers : header\r\n    }).catch(error=>{\r\n        if(error.response.status === 404)\r\n            throw new Error(\"Pas de mécanicien dans la base de dinnées\");\r\n        else if(error.response.status === 500)\r\n            throw new Error(\"Erreur de connexion\");\r\n    })\r\n    return reponse.data;\r\n}\r\nconst deleteMecanicien =  async(idMecanicien)=>{\r\n    const reponse = await axios.delete(API_URL+\"garage/\",{\r\n        headers:header,\r\n        data:{\r\n            id : idMecanicien\r\n        }\r\n    }).catch(error=>{\r\n        if(error.response.status === 404)\r\n            throw new Error(\"Mecano inconnu\");\r\n    });\r\n    return reponse.status;\r\n}\r\nconst updateMecanicien= async(id,nom,prenom,password)=>{\r\n    const reponse = await axios.patch(API_URL+\"garage/\",{\r\n        headers:header,\r\n        data : {\r\n            id : id,\r\n            nom:nom,\r\n            prenom: prenom,\r\n            password : password\r\n        }\r\n    }).catch(error=>{\r\n        if(error.response.status === 500){\r\n            throw new Error(\"Ressource manquante\");\r\n        }\r\n    });\r\n    return reponse.data;\r\n}\r\nconst postMecanicien = async(nom,prenom,password,adresseMail,garage_fk)=>{\r\n    console.log(nom,prenom,password,adresseMail,garage_fk);\r\n    const reponse = await axios.post(API_URL+\"garage/\", {\r\n        nom:nom,\r\n        prenom:prenom,\r\n        password:password,\r\n        adresseMail:adresseMail,\r\n        garage_fk : garage_fk\r\n    },{\r\n        headers : header\r\n    }).catch(error=>{\r\n        if(error.response.status===500){\r\n            throw new Error(\"Erreur sdur le serveur\")\r\n        }else if(error.response.status === 400){\r\n            throw new Error(\"Erreur sur les éléments de la requête\");\r\n        }\r\n    });\r\n    return reponse.data;\r\n}\r\nexport {\r\n    login,\r\n    getAllGarage,\r\n    deleteGarage,\r\n    postGarage,\r\n    updateGarage,\r\n    getAllMecanicien,\r\n    deleteMecanicien,\r\n    updateMecanicien,\r\n    postMecanicien\r\n}"],"sourceRoot":""}