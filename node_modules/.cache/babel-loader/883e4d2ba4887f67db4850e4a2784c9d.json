{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alexandre\\\\IdeaProjects\\\\client_web_avence\\\\src\\\\component\\\\Login\\\\Connection.js\";\nimport React, { useState } from \"react\";\nimport \"./connectionStyle.css\";\nimport { login } from \"../API\";\nimport { Button, TextField, Grid, Paper, Typography } from \"@material-ui/core\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nclass Connection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      loaded: false,\n      loading: false,\n      errorMassage: false,\n      connected: false\n    };\n  }\n\n  async handleSubmit() {\n    this.setState({\n      error: false,\n      errorMessage: \"\",\n      loading: true,\n      loaded: false\n    });\n\n    try {\n      const data = await login(this.state.email, this.state.password);\n\n      if (data.user.userRecup.userType !== \"mecano\") {\n        throw new Error(\"Un client ne peut pas se connecter à l'application!\");\n      }\n\n      console.log(data);\n      this.props.login(data.user.userRecup);\n      this.setState({\n        connected: true\n      });\n    } catch (error) {\n      this.setState({\n        error: true,\n        loading: false,\n        loaded: true,\n        errorMessage: error\n      });\n    }\n  }\n\n  userChange(evt) {\n    this.setState({\n      email: evt.target.value\n    });\n  }\n\n  passwordChange(evt) {\n    this.setState({\n      password: evt.target.value\n    });\n  }\n\n  render() {\n    // // if(this.state.connected){\n    // //     return <Redirect to={\"/menu\"}/>\n    // }\n    // // let contentMessage;\n    // if(!this.state.loaded)\n    //     contentMessage = null;\n    // else if(this.state.loading){\n    //     contentMessage = <Grid item><Typography component={\"h6\"} color={\"error\"}>Chargement en cours</Typography> </Grid>;\n    // }else if(this.state.error){\n    //     contentMessage = <Grid item><Typography component={\"h6\"} color={\"error\"}>{this.state.errorMassage}</Typography> </Grid>\n    // }\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }\n    }, \"Se connecter\"), /*#__PURE__*/React.createElement(\"form\", {\n      className: \"row g-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: \"form-control\",\n      type: \"text\",\n      id: \"emailAdresse\",\n      placeholder: \"Adresse mail\",\n      value: this.state.email,\n      onChange: event => this.userChange(event),\n      autoFocus: true,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"form-control\",\n      type: \"password\",\n      id: \"password\",\n      placeholder: \"Password\",\n      value: this.state.password,\n      onChange: event => this.passwordChange(event),\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-primary\",\n      onClick: () => {\n        this.dissmisError();\n        this.handleSubmit();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }\n    }, \"Connexion\")));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    login: user => {\n      dispatch({\n        type: \"login\",\n        payload: {\n          userInfo: user\n        }\n      });\n    }\n  };\n};\n\nexport default connect(undefined, mapDispatchToProps)(Connection);","map":{"version":3,"sources":["C:/Users/Alexandre/IdeaProjects/client_web_avence/src/component/Login/Connection.js"],"names":["React","useState","login","Button","TextField","Grid","Paper","Typography","Redirect","connect","Connection","Component","constructor","props","state","email","password","loaded","loading","errorMassage","connected","handleSubmit","setState","error","errorMessage","data","user","userRecup","userType","Error","console","log","userChange","evt","target","value","passwordChange","render","event","dissmisError","mapDispatchToProps","dispatch","type","payload","userInfo","undefined"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport \"./connectionStyle.css\";\r\nimport {login} from \"../API\";\r\nimport {\r\n    Button,\r\n    TextField,\r\n    Grid,\r\n    Paper,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n\r\nclass Connection extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            password:'',\r\n            loaded:false,\r\n            loading:false,\r\n        errorMassage:false,\r\n        connected:false};\r\n\r\n    }\r\n    async handleSubmit(){\r\n        this.setState({error:false,\r\n        errorMessage:\"\",\r\n        loading:true,\r\n        loaded:false});\r\n        try{\r\n            const data = await login(this.state.email,this.state.password);\r\n            if(data.user.userRecup.userType !== \"mecano\") {\r\n                throw new Error(\"Un client ne peut pas se connecter à l'application!\");\r\n            }\r\n            console.log(data)\r\n            this.props.login(data.user.userRecup);\r\n            this.setState({\r\n                connected:true});\r\n        }catch (error) {\r\n            this.setState({\r\n                error : true,\r\n                loading:false,\r\n                loaded:true,\r\n                errorMessage:error\r\n            });\r\n        }\r\n    }\r\n    userChange(evt){\r\n        this.setState({email:evt.target.value});\r\n    }\r\n    passwordChange(evt){\r\n        this.setState({password:evt.target.value});\r\n    }\r\n\r\n\r\n    render() {\r\n            // // if(this.state.connected){\r\n            // //     return <Redirect to={\"/menu\"}/>\r\n            // }\r\n            // // let contentMessage;\r\n            // if(!this.state.loaded)\r\n            //     contentMessage = null;\r\n            // else if(this.state.loading){\r\n            //     contentMessage = <Grid item><Typography component={\"h6\"} color={\"error\"}>Chargement en cours</Typography> </Grid>;\r\n            // }else if(this.state.error){\r\n            //     contentMessage = <Grid item><Typography component={\"h6\"} color={\"error\"}>{this.state.errorMassage}</Typography> </Grid>\r\n            // }\r\n            return (\r\n                <div className=\"form\">\r\n                    <h1>Se connecter</h1>\r\n                    <form className=\"row g-3\">\r\n                    <input\r\n                     className=\"form-control\"\r\n                     type=\"text\"\r\n                     id=\"emailAdresse\"\r\n                     placeholder=\"Adresse mail\"\r\n                     value = {this.state.email}\r\n                     onChange ={(event)=>this.userChange(event)}\r\n                     autoFocus\r\n                     required\r\n                     ></input>\r\n\r\n                    <input\r\n                    className=\"form-control\"\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    placeholder=\"Password\"\r\n                    value = {this.state.password}\r\n                    onChange ={(event)=>this.passwordChange(event)}\r\n                    required\r\n                    ></input>\r\n                    <button \r\n                    type=\"submit\" \r\n                    className=\"btn btn-primary\"\r\n                    onClick ={()=>{\r\n                        this.dissmisError();\r\n                        this.handleSubmit();\r\n                    }}\r\n                    >Connexion</button>\r\n                    </form>\r\n                </div>\r\n            )\r\n\r\n\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch)=>{\r\n    return {\r\n        login : (user)=>{\r\n            dispatch({type:\"login\", payload:{userInfo:user}})\r\n        }\r\n    }\r\n}\r\nexport default connect(undefined,mapDispatchToProps)(Connection);"]},"metadata":{},"sourceType":"module"}