{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://localhost:3001/\";\nlet header = {\n  'Access-Control-Allow-Origin': \"*\"\n};\n\nconst login = async (adresseMail, password) => {\n  const reponse = await axios.post(API_URL + \"user/admin\", {\n    adresseMail,\n    password\n  }, {\n    headers: header\n  }).catch(error => {\n    if (error.response.status === 400) {\n      throw new Error(\"Les identifiants n'existent pas dans la base de données\");\n    } else if (error.response.status === 404) {\n      throw new Error(\"Utilisateur inconnu pour cet administrateur\");\n    } else if (error.response.status === 500) {\n      throw new Error(\"Erreur de connexion\");\n    }\n  });\n  header = {\n    'Authorization': 'Bearer ' + reponse.data.token,\n    'Accept-version': \"1.0.0\",\n    'Access-Control-Allow-Origin': \"*\"\n  };\n  return reponse.data;\n};\n\nconst getGarageById = async idGarage => {\n  const response = await axios.get(API_URL + \"garage/\" + idGarage, {\n    headers: header\n  }).catch(error => {\n    if (error.response.status === 404) throw new Error(\"Garage inconnu\");else if (error.response.status === 500) throw new Error(\"Erreur de connexion\");\n  });\n  return response.data;\n};\n\nconst getAllGarage = async () => {\n  const reponse = await axios.get(API_URL + \"garage/\", {\n    headers: header\n  }).catch(error => {\n    if (error.response.status === 404) throw new Error(\"Aucun garage renseigné\");else if (error.response.status === 500) throw new Error(\"Erreur de connexion\");\n  });\n  return reponse.data;\n};\n\nconst deleteGarage = async idGarage => {\n  const reponse = await axios.delete(API_URL + \"garage/\", {\n    headers: header,\n    data: {\n      id: idGarage\n    }\n  }).catch(error => {\n    if (error.response.status === 404) throw new Error(\"Garage inconnu\");\n  });\n  return reponse.status;\n};\n\nconst postGarage = async (nom, adresse, numTel, image) => {\n  console.log(nom, adresse, numTel, image);\n  const reponse = await axios.post(API_URL + \"garage/\", {\n    nom: nom,\n    adresse: adresse,\n    numTel: numTel,\n    image: image\n  }, {\n    headers: header\n  }).catch(error => {\n    if (error.response.status === 500) {\n      throw new Error(\"Erreur sdur le serveur\");\n    } else if (error.response.status === 400) {\n      throw new Error(\"Erreur sur les éléments de la requête\");\n    }\n  });\n  return reponse.data;\n};\n\nconst updateGarage = async (id, nom, adresse, numTel) => {\n  console.log(nom);\n  const reponse = await axios.patch(API_URL + \"garage/\", {\n    headers: header,\n    data: {\n      id: id,\n      nom: nom,\n      adresse: adresse,\n      numTel: numTel\n    }\n  }).catch(error => {\n    if (error.response.status === 500) {\n      throw new Error(\"Ressource manquante\");\n    }\n  });\n  return reponse.data;\n};\n\nconst getAllMecanicien = async () => {\n  const reponse = await axios.get(API_URL + \"mecano/\", {\n    headers: header\n  }).catch(error => {\n    if (error.response.status === 404) throw new Error(\"Pas de mécanicien dans la base de dinnées\");else if (error.response.status === 500) throw new Error(\"Erreur de connexion\");\n  });\n  return reponse.data;\n};\n\nconst deleteMecanicien = async idMecanicien => {\n  const reponse = await axios.delete(API_URL + \"mecano/\", {\n    headers: header,\n    data: {\n      id: idMecanicien\n    }\n  }).catch(error => {\n    if (error.response.status === 404) throw new Error(\"Mecano inconnu\");\n  });\n  return reponse.status;\n};\n\nconst updateMecanicien = async (id, nom, prenom, password) => {\n  const reponse = await axios.patch(API_URL + \"mecano/\", {\n    headers: header,\n    data: {\n      id: id,\n      nom: nom,\n      prenom: prenom,\n      password: password\n    }\n  }).catch(error => {\n    if (error.response.status === 500) {\n      throw new Error(\"Ressource manquante\");\n    }\n  });\n  return reponse.data;\n};\n\nconst postMecanicien = async (nom, prenom, password, adresseMail, garage_fk) => {\n  console.log(nom, prenom, password, adresseMail, garage_fk);\n  const reponse = await axios.post(API_URL + \"mecano/\", {\n    nom: nom,\n    prenom: prenom,\n    password: password,\n    adresseMail: adresseMail,\n    garage_fk: garage_fk\n  }, {\n    headers: header\n  }).catch(error => {\n    if (error.response.status === 500) {\n      throw new Error(\"Erreur sdur le serveur\");\n    } else if (error.response.status === 400) {\n      throw new Error(\"Erreur sur les éléments de la requête\");\n    }\n  });\n  return reponse.data;\n};\n\nconst getAllDispo = async () => {\n  console.log(localStorage.getItem(\"Token\"));\n  const reponse = await axios.get(API_URL + \"dispo/\", {\n    headers: {\n      Authorization: \"Bearer\" + sessionStorage.getItem(\"Token\")\n    }\n  }).catch(error => {\n    if (error.response.status === 404) throw new Error(\"Pas de mécanicien dans la base de dinnées\");else if (error.response.status === 500) throw new Error(\"Erreur de connexion\");\n  });\n  return reponse.data;\n};\n\nconst deleteDispo = async (id, mecanicien_fk) => {\n  const reponse = await axios.delete(API_URL + \"dispo/\", {\n    headers: header,\n    data: {\n      id: id,\n      mecanicien_fk: mecanicien_fk\n    }\n  }).catch(error => {\n    if (error.response.status === 404) throw new Error(\"Mecano inconnu\");\n  });\n  return reponse.status;\n};\n\nconst updateDispo = async (id, date, isbooked, idMecano, idReparation) => {\n  const reponse = await axios.patch(API_URL + \"dispo/\", {\n    headers: header,\n    data: {\n      id: id,\n      date: date,\n      isBooked: isbooked,\n      idMecano: idMecano,\n      idReparation: idReparation\n    }\n  }).catch(error => {\n    if (error.response.status === 500) {\n      throw new Error(\"Ressource manquante\");\n    }\n  });\n  return reponse.data;\n};\n\nconst postDispo = async (date, isBooked, idMecanicien, idReparation) => {\n  const reponse = await axios.post(API_URL + \"dispo/\", {\n    date: date,\n    isBooked: isBooked,\n    idMecanicien: idMecanicien,\n    idReparation: idReparation\n  }, {\n    headers: header\n  }).catch(error => {\n    if (error.response.status === 500) {\n      throw new Error(\"Erreur sdur le serveur\");\n    } else if (error.response.status === 400) {\n      throw new Error(\"Erreur sur les éléments de la requête\");\n    }\n  });\n  return reponse.data;\n};\n\nexport { login, getAllGarage, deleteGarage, postGarage, updateGarage, getAllMecanicien, deleteMecanicien, updateMecanicien, postMecanicien, getAllDispo, deleteDispo, updateDispo, postDispo, getGarageById };","map":{"version":3,"sources":["C:/Users/Alexandre/IdeaProjects/client_web_avence/src/component/API/API.js"],"names":["axios","API_URL","header","login","adresseMail","password","reponse","post","headers","catch","error","response","status","Error","data","token","getGarageById","idGarage","get","getAllGarage","deleteGarage","delete","id","postGarage","nom","adresse","numTel","image","console","log","updateGarage","patch","getAllMecanicien","deleteMecanicien","idMecanicien","updateMecanicien","prenom","postMecanicien","garage_fk","getAllDispo","localStorage","getItem","Authorization","sessionStorage","deleteDispo","mecanicien_fk","updateDispo","date","isbooked","idMecano","idReparation","isBooked","postDispo"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:3001/\";\r\nlet header = {'Access-Control-Allow-Origin' : \"*\"}\r\n\r\nconst login = async(adresseMail,password)=>{\r\n    const reponse = await axios.post(API_URL+\"user/admin\",{\r\n        adresseMail,\r\n        password\r\n    },{\r\n        headers : header\r\n    }).catch(error=>{\r\n\r\n        if(error.response.status === 400){\r\n            throw new Error(\"Les identifiants n'existent pas dans la base de données\");\r\n        }else if(error.response.status === 404){\r\n            throw new Error(\"Utilisateur inconnu pour cet administrateur\");\r\n        }else if(error.response.status === 500){\r\n            throw new Error(\"Erreur de connexion\");\r\n        }\r\n\r\n    });\r\n    header = {\r\n        'Authorization': 'Bearer ' + reponse.data.token,\r\n        'Accept-version' : \"1.0.0\",\r\n        'Access-Control-Allow-Origin' : \"*\"\r\n    }\r\n\r\n\r\n    return reponse.data;\r\n\r\n\r\n}\r\nconst getGarageById = async (idGarage) => {\r\n    const response = await axios.get(API_URL+\"garage/\"+idGarage,{\r\n        headers : header\r\n    }).catch(error=>{\r\n        if(error.response.status === 404)\r\n            throw new Error(\"Garage inconnu\");\r\n        else if(error.response.status === 500)\r\n            throw new Error(\"Erreur de connexion\");\r\n    });\r\n    return response.data;\r\n}\r\nconst getAllGarage = async ()=>{\r\n    const reponse = await axios.get(API_URL+\"garage/\",{\r\n    headers : header\r\n    }).catch(error=>{\r\n        if(error.response.status === 404)\r\n            throw new Error(\"Aucun garage renseigné\");\r\n        else if(error.response.status === 500)\r\n            throw new Error(\"Erreur de connexion\");\r\n    });\r\n    return reponse.data;\r\n}\r\nconst deleteGarage = async(idGarage)=>{\r\n    const reponse = await axios.delete(API_URL+\"garage/\",{\r\n        headers:header,\r\n        data:{\r\n            id : idGarage\r\n        }\r\n    }).catch(error=>{\r\n        if(error.response.status === 404)\r\n        throw new Error(\"Garage inconnu\");\r\n    });\r\n    return reponse.status;\r\n}\r\nconst postGarage = async(nom,adresse,numTel,image)=>{\r\n    console.log(nom,adresse,numTel,image);\r\n    const reponse = await axios.post(API_URL+\"garage/\", {\r\n        nom:nom,\r\n        adresse:adresse,\r\n        numTel:numTel,\r\n        image:image\r\n    },{\r\n        headers : header\r\n    }).catch(error=>{\r\n        if(error.response.status===500){\r\n            throw new Error(\"Erreur sdur le serveur\")\r\n        }else if(error.response.status === 400){\r\n            throw new Error(\"Erreur sur les éléments de la requête\");\r\n        }\r\n    });\r\n    return reponse.data;\r\n}\r\nconst updateGarage = async(id,nom,adresse,numTel)=>{\r\n    console.log(nom);\r\n    const reponse = await axios.patch(API_URL+\"garage/\",{\r\n        headers:header,\r\n        data : {\r\n            id : id,\r\n            nom:nom,\r\n            adresse: adresse,\r\n            numTel : numTel\r\n        }\r\n    }).catch(error=>{\r\n        if(error.response.status === 500){\r\n            throw new Error(\"Ressource manquante\");\r\n        }\r\n    });\r\n    return reponse.data;\r\n}\r\nconst getAllMecanicien = async()=>{\r\n    const reponse = await axios.get(API_URL+\"mecano/\",{\r\n        headers : header\r\n    }).catch(error=>{\r\n        if(error.response.status === 404)\r\n            throw new Error(\"Pas de mécanicien dans la base de dinnées\");\r\n        else if(error.response.status === 500)\r\n            throw new Error(\"Erreur de connexion\");\r\n    })\r\n    return reponse.data;\r\n}\r\nconst deleteMecanicien =  async(idMecanicien)=>{\r\n    const reponse = await axios.delete(API_URL+\"mecano/\",{\r\n        headers:header,\r\n        data:{\r\n            id : idMecanicien\r\n        }\r\n    }).catch(error=>{\r\n        if(error.response.status === 404)\r\n            throw new Error(\"Mecano inconnu\");\r\n    });\r\n    return reponse.status;\r\n}\r\nconst updateMecanicien= async(id,nom,prenom,password)=>{\r\n    const reponse = await axios.patch(API_URL+\"mecano/\",{\r\n        headers:header,\r\n        data : {\r\n            id : id,\r\n            nom:nom,\r\n            prenom: prenom,\r\n            password : password\r\n        }\r\n    }).catch(error=>{\r\n        if(error.response.status === 500){\r\n            throw new Error(\"Ressource manquante\");\r\n        }\r\n    });\r\n    return reponse.data;\r\n}\r\nconst postMecanicien = async(nom,prenom,password,adresseMail,garage_fk)=>{\r\n    console.log(nom,prenom,password,adresseMail,garage_fk);\r\n    const reponse = await axios.post(API_URL+\"mecano/\", {\r\n        nom:nom,\r\n        prenom:prenom,\r\n        password:password,\r\n        adresseMail:adresseMail,\r\n        garage_fk : garage_fk\r\n    },{\r\n        headers : header\r\n    }).catch(error=>{\r\n        if(error.response.status===500){\r\n            throw new Error(\"Erreur sdur le serveur\")\r\n        }else if(error.response.status === 400){\r\n            throw new Error(\"Erreur sur les éléments de la requête\");\r\n        }\r\n    });\r\n    return reponse.data;\r\n}\r\nconst getAllDispo = async()=>{\r\n    console.log(localStorage.getItem(\"Token\"));\r\n    const reponse = await axios.get(API_URL+\"dispo/\",{\r\n        headers : {\r\n            Authorization:\"Bearer\" + sessionStorage.getItem(\"Token\")\r\n        }\r\n    }).catch(error=>{\r\n        if(error.response.status === 404)\r\n            throw new Error(\"Pas de mécanicien dans la base de dinnées\");\r\n        else if(error.response.status === 500)\r\n            throw new Error(\"Erreur de connexion\");\r\n    })\r\n    return reponse.data;\r\n}\r\nconst deleteDispo =  async(id,mecanicien_fk)=>{\r\n    const reponse = await axios.delete(API_URL+\"dispo/\",{\r\n        headers:header,\r\n        data:{\r\n            id : id,\r\n            mecanicien_fk : mecanicien_fk\r\n        }\r\n    }).catch(error=>{\r\n        if(error.response.status === 404)\r\n            throw new Error(\"Mecano inconnu\");\r\n    });\r\n    return reponse.status;\r\n}\r\nconst updateDispo= async(id,date,isbooked,idMecano,idReparation)=>{\r\n    const reponse = await axios.patch(API_URL+\"dispo/\",{\r\n        headers:header,\r\n        data : {\r\n            id : id,\r\n            date:date,\r\n            isBooked: isbooked,\r\n            idMecano : idMecano,\r\n            idReparation : idReparation\r\n        }\r\n    }).catch(error=>{\r\n        if(error.response.status === 500){\r\n            throw new Error(\"Ressource manquante\");\r\n        }\r\n    });\r\n    return reponse.data;\r\n}\r\nconst postDispo = async(date,isBooked,idMecanicien,idReparation)=>{\r\n    const reponse = await axios.post(API_URL+\"dispo/\", {\r\n        date:date,\r\n        isBooked:isBooked,\r\n        idMecanicien:idMecanicien,\r\n        idReparation:idReparation,\r\n    },{\r\n        headers : header\r\n    }).catch(error=>{\r\n        if(error.response.status===500){\r\n            throw new Error(\"Erreur sdur le serveur\")\r\n        }else if(error.response.status === 400){\r\n            throw new Error(\"Erreur sur les éléments de la requête\");\r\n        }\r\n    });\r\n    return reponse.data;\r\n}\r\n\r\nexport {\r\n    login,\r\n    getAllGarage,\r\n    deleteGarage,\r\n    postGarage,\r\n    updateGarage,\r\n    getAllMecanicien,\r\n    deleteMecanicien,\r\n    updateMecanicien,\r\n    postMecanicien,\r\n    getAllDispo,\r\n    deleteDispo,\r\n    updateDispo,\r\n    postDispo,\r\n    getGarageById,\r\n\r\n}"]},"metadata":{},"sourceType":"module"}