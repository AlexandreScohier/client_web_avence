{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \" http://localhost:3001/\";\nlet header = {\n  'Access-Control-Allow-Origin': \"*\"\n};\n\nconst login = async (adresseMail, password) => {\n  const reponse = await axios.post(API_URL + \"user/admin\", {\n    adresseMail,\n    password\n  }, {\n    headers: header\n  }).catch(error => {\n    if (error.response.status === 400) {\n      throw new Error(\"Les identifiants n'existent pas dans la base de données\");\n    } else if (error.response.status === 404) {\n      throw new Error(\"Utilisateur inconnu pour cet administrateur\");\n    } else if (error.response.status === 500) {\n      throw new Error(\"Erreur de connexion\");\n    }\n  });\n  header = {\n    'Authorization': 'Bearer ' + reponse.data,\n    'Access-Control-Allow-Origin': \"*\"\n  };\n  return reponse.data;\n};\n\nconst getAllGarage = async () => {\n  const reponse = await axios.get(API_URL + \"garage/\", {\n    headers: header\n  }).catch(error => {\n    if (error.response.status === 404) throw new Error(\"Garage inconnu\");else if (error.response.status === 500) throw new Error(\"Erreur de connexion\");\n  });\n  console.log(JSON.stringify(reponse.data));\n  return reponse.data;\n};\n\nconst deleteGarage = async idGarage => {\n  const reponse = await axios.delete(API_URL + \"garage/\", {\n    headers: header\n  }, {\n    id: idGarage\n  }).catch(error => {\n    if (error.response.status === 404) throw new Error(\"Garage inconnu\");\n  });\n  console.log(reponse);\n  return reponse.status;\n};\n\nexport { login, getAllGarage, deleteGarage };","map":{"version":3,"sources":["C:/Users/matth/Desktop/client_web_avence/src/component/API/API.js"],"names":["axios","API_URL","header","login","adresseMail","password","reponse","post","headers","catch","error","response","status","Error","data","getAllGarage","get","console","log","JSON","stringify","deleteGarage","idGarage","delete","id"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,yBAAhB;AACA,IAAIC,MAAM,GAAG;AAAC,iCAAgC;AAAjC,CAAb;;AACA,MAAMC,KAAK,GAAG,OAAMC,WAAN,EAAkBC,QAAlB,KAA6B;AAEvC,QAAMC,OAAO,GAAG,MAAMN,KAAK,CAACO,IAAN,CAAWN,OAAO,GAAC,YAAnB,EAAgC;AAClDG,IAAAA,WADkD;AAElDC,IAAAA;AAFkD,GAAhC,EAGpB;AACEG,IAAAA,OAAO,EAAGN;AADZ,GAHoB,EAKnBO,KALmB,CAKbC,KAAK,IAAE;AAEZ,QAAGA,KAAK,CAACC,QAAN,CAAeC,MAAf,KAA0B,GAA7B,EAAiC;AAC7B,YAAM,IAAIC,KAAJ,CAAU,yDAAV,CAAN;AACH,KAFD,MAEM,IAAGH,KAAK,CAACC,QAAN,CAAeC,MAAf,KAA0B,GAA7B,EAAiC;AACnC,YAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACH,KAFK,MAEA,IAAGH,KAAK,CAACC,QAAN,CAAeC,MAAf,KAA0B,GAA7B,EAAiC;AACnC,YAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AACH;AAEJ,GAfqB,CAAtB;AAgBAX,EAAAA,MAAM,GAAG;AACL,qBAAiB,YAAYI,OAAO,CAACQ,IADhC;AAEL,mCAAgC;AAF3B,GAAT;AAOA,SAAOR,OAAO,CAACQ,IAAf;AAGH,CA5BD;;AA6BA,MAAMC,YAAY,GAAG,YAAU;AAC3B,QAAMT,OAAO,GAAG,MAAMN,KAAK,CAACgB,GAAN,CAAUf,OAAO,GAAC,SAAlB,EAA4B;AAClDO,IAAAA,OAAO,EAAGN;AADwC,GAA5B,EAEnBO,KAFmB,CAEbC,KAAK,IAAE;AACZ,QAAGA,KAAK,CAACC,QAAN,CAAeC,MAAf,KAA0B,GAA7B,EACI,MAAM,IAAIC,KAAJ,CAAU,gBAAV,CAAN,CADJ,KAEK,IAAGH,KAAK,CAACC,QAAN,CAAeC,MAAf,KAA0B,GAA7B,EACD,MAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AACP,GAPqB,CAAtB;AAQAI,EAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAed,OAAO,CAACQ,IAAvB,CAAZ;AACA,SAAOR,OAAO,CAACQ,IAAf;AACH,CAXD;;AAYA,MAAMO,YAAY,GAAG,MAAMC,QAAN,IAAiB;AAClC,QAAMhB,OAAO,GAAG,MAAMN,KAAK,CAACuB,MAAN,CAAatB,OAAO,GAAC,SAArB,EAA+B;AACjDO,IAAAA,OAAO,EAACN;AADyC,GAA/B,EAEpB;AACEsB,IAAAA,EAAE,EAACF;AADL,GAFoB,EAInBb,KAJmB,CAIbC,KAAK,IAAE;AACZ,QAAGA,KAAK,CAACC,QAAN,CAAeC,MAAf,KAA0B,GAA7B,EACA,MAAM,IAAIC,KAAJ,CAAU,gBAAV,CAAN;AACH,GAPqB,CAAtB;AAQAI,EAAAA,OAAO,CAACC,GAAR,CAAYZ,OAAZ;AACA,SAAOA,OAAO,CAACM,MAAf;AACH,CAXD;;AAYA,SACIT,KADJ,EAEIY,YAFJ,EAGIM,YAHJ","sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \" http://localhost:3001/\";\r\nlet header = {'Access-Control-Allow-Origin' : \"*\"}\r\nconst login = async(adresseMail,password)=>{\r\n\r\n    const reponse = await axios.post(API_URL+\"user/admin\",{\r\n        adresseMail,\r\n        password\r\n    },{\r\n        headers : header\r\n    }).catch(error=>{\r\n\r\n        if(error.response.status === 400){\r\n            throw new Error(\"Les identifiants n'existent pas dans la base de données\");\r\n        }else if(error.response.status === 404){\r\n            throw new Error(\"Utilisateur inconnu pour cet administrateur\");\r\n        }else if(error.response.status === 500){\r\n            throw new Error(\"Erreur de connexion\");\r\n        }\r\n\r\n    });\r\n    header = {\r\n        'Authorization': 'Bearer ' + reponse.data,\r\n        'Access-Control-Allow-Origin' : \"*\"\r\n    }\r\n\r\n\r\n\r\n    return reponse.data;\r\n\r\n\r\n}\r\nconst getAllGarage = async ()=>{\r\n    const reponse = await axios.get(API_URL+\"garage/\",{\r\n    headers : header\r\n    }).catch(error=>{\r\n        if(error.response.status === 404)\r\n            throw new Error(\"Garage inconnu\");\r\n        else if(error.response.status === 500)\r\n            throw new Error(\"Erreur de connexion\");\r\n    });\r\n    console.log(JSON.stringify(reponse.data));\r\n    return reponse.data;\r\n}\r\nconst deleteGarage = async(idGarage)=>{\r\n    const reponse = await axios.delete(API_URL+\"garage/\",{\r\n        headers:header\r\n    },{\r\n        id:idGarage\r\n    }).catch(error=>{\r\n        if(error.response.status === 404)\r\n        throw new Error(\"Garage inconnu\");\r\n    });\r\n    console.log(reponse);\r\n    return reponse.status;\r\n}\r\nexport {\r\n    login,\r\n    getAllGarage,\r\n    deleteGarage\r\n}"]},"metadata":{},"sourceType":"module"}