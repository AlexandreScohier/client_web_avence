{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://localhost:3001/\";\nlet header = {\n  'Access-Control-Allow-Origin': \"*\"\n};\n\nconst login = async (adresseMail, password) => {\n  const reponse = await axios.post(API_URL + \"user/admin\", {\n    adresseMail,\n    password\n  }, {\n    headers: header\n  }).catch(error => {\n    if (error.response.status === 400) {\n      throw new Error(\"Les identifiants n'existent pas dans la base de données\");\n    } else if (error.response.status === 404) {\n      throw new Error(\"Utilisateur inconnu pour cet administrateur\");\n    } else if (error.response.status === 500) {\n      throw new Error(\"Erreur de connexion\");\n    }\n  });\n  header = {\n    'Authorization': 'Bearer ' + reponse.data,\n    'Accept-version': \"1.0.0\",\n    'Access-Control-Allow-Origin': \"*\"\n  };\n  console.log(reponse.data);\n  return reponse.data;\n};\n\nconst getAllGarage = async () => {\n  const reponse = await axios.get(API_URL + \"garage/\", {\n    headers: header\n  }).catch(error => {\n    if (error.response.status === 404) throw new Error(\"Garage inconnu\");else if (error.response.status === 500) throw new Error(\"Erreur de connexion\");\n  });\n  console.log(JSON.stringify(reponse.data));\n  return reponse.data;\n};\n\nconst deleteGarage = async idGarage => {\n  const reponse = await axios.delete(API_URL + \"garage/\", {\n    headers: header,\n    data: {\n      id: idGarage\n    }\n  }).catch(error => {\n    if (error.response.status === 404) throw new Error(\"Garage inconnu\");\n  });\n  return reponse.status;\n};\n\nconst postGarage = async (nom, adresse, numTel, image) => {\n  console.log(nom);\n  const reponse = await axios.post(API_URL + \"garage/\", {\n    headers: header,\n    data: {\n      nom: nom,\n      adresse: adresse,\n      numTel: numTel,\n      image: image\n    }\n  }).catch(error => {\n    if (error.response.status === 500) {\n      throw new Error(\"Erreur sdur le serveur\");\n    } else if (error.response.status === 400) {\n      throw new Error(\"Erreur sur les éléments de la requête\");\n    }\n  });\n  return reponse.status;\n};\n\nconst updateGarage = async (id, nom, adresse, numTel) => {\n  const reponse = await axios.patch(API_URL + \"garage/\", {\n    headers: header,\n    data: {\n      id: id,\n      nom: nom,\n      adresse: adresse,\n      numTel: numTel\n    }\n  }).catch(error => {\n    if (error.response.status === 500) {\n      throw new Error(\"Ressource manquante\");\n    }\n  });\n  return reponse.data;\n};\n\nexport { login, getAllGarage, deleteGarage, postGarage, updateGarage };","map":{"version":3,"sources":["C:/Users/matth/Desktop/client_web_avence/src/component/API/API.js"],"names":["axios","API_URL","header","login","adresseMail","password","reponse","post","headers","catch","error","response","status","Error","data","console","log","getAllGarage","get","JSON","stringify","deleteGarage","idGarage","delete","id","postGarage","nom","adresse","numTel","image","updateGarage","patch"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:3001/\";\r\nlet header = {'Access-Control-Allow-Origin' : \"*\"}\r\nconst login = async(adresseMail,password)=>{\r\n\r\n    const reponse = await axios.post(API_URL+\"user/admin\",{\r\n        adresseMail,\r\n        password\r\n    },{\r\n        headers : header\r\n    }).catch(error=>{\r\n\r\n        if(error.response.status === 400){\r\n            throw new Error(\"Les identifiants n'existent pas dans la base de données\");\r\n        }else if(error.response.status === 404){\r\n            throw new Error(\"Utilisateur inconnu pour cet administrateur\");\r\n        }else if(error.response.status === 500){\r\n            throw new Error(\"Erreur de connexion\");\r\n        }\r\n\r\n    });\r\n    header = {\r\n        'Authorization': 'Bearer ' + reponse.data,\r\n        'Accept-version' : \"1.0.0\",\r\n        'Access-Control-Allow-Origin' : \"*\"\r\n    }\r\n    console.log(reponse.data);\r\n\r\n\r\n    return reponse.data;\r\n\r\n\r\n}\r\nconst getAllGarage = async ()=>{\r\n    const reponse = await axios.get(API_URL+\"garage/\",{\r\n    headers : header\r\n    }).catch(error=>{\r\n        if(error.response.status === 404)\r\n            throw new Error(\"Garage inconnu\");\r\n        else if(error.response.status === 500)\r\n            throw new Error(\"Erreur de connexion\");\r\n    });\r\n    console.log(JSON.stringify(reponse.data));\r\n    return reponse.data;\r\n}\r\nconst deleteGarage = async(idGarage)=>{\r\n    const reponse = await axios.delete(API_URL+\"garage/\",{\r\n        headers:header,\r\n        data:{\r\n            id : idGarage\r\n        }\r\n    }).catch(error=>{\r\n        if(error.response.status === 404)\r\n        throw new Error(\"Garage inconnu\");\r\n    });\r\n    return reponse.status;\r\n}\r\nconst postGarage = async(nom,adresse,numTel,image)=>{\r\n    console.log(nom);\r\n    const reponse = await axios.post(API_URL+\"garage/\",{\r\n        headers:header,\r\n        data:{\r\n            nom : nom,\r\n            adresse : adresse,\r\n            numTel : numTel,\r\n            image : image\r\n        }\r\n    }).catch(error=>{\r\n        if(error.response.status===500){\r\n            throw new Error(\"Erreur sdur le serveur\")\r\n        }else if(error.response.status === 400){\r\n            throw new Error(\"Erreur sur les éléments de la requête\");\r\n        }\r\n    });\r\n    return reponse.status;\r\n}\r\nconst updateGarage = async(id,nom,adresse,numTel)=>{\r\n    const reponse = await axios.patch(API_URL+\"garage/\",{\r\n        headers:header,\r\n        data : {\r\n            id : id,\r\n            nom:nom,\r\n            adresse: adresse,\r\n            numTel : numTel\r\n        }\r\n    }).catch(error=>{\r\n        if(error.response.status === 500){\r\n            throw new Error(\"Ressource manquante\");\r\n        }\r\n    });\r\n    return reponse.data;\r\n}\r\nexport {\r\n    login,\r\n    getAllGarage,\r\n    deleteGarage,\r\n    postGarage,\r\n    updateGarage\r\n}"]},"metadata":{},"sourceType":"module"}